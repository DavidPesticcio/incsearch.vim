scriptencoding utf-8
let s:save_cpo = &cpo
set cpo&vim


let s:prefix = expand("<sfile>:p:h:h:t")
function! s:set_prefix(prefix)
	let s:prefix = a:prefix
endfunction


let s:uniq_counter = 0
function! s:make_uniq_nr()
	let s:uniq_counter += 1
	return s:uniq_counter
endfunction


function! s:numbering(...)
	let tabnr = get(a:, 1, tabpagenr())
	let uniq_nr = s:make_uniq_nr()
	call settabvar(tabnr, s:prefix . "_gift_uniq_tabpagenr", uniq_nr)
	return uniq_nr
endfunction


function! s:uniq_nr(...)
	let tabnr = get(a:, 1, tabpagenr())
	let uniq_nr = get(gettabvar(tabnr, ""), s:prefix . "_gift_uniq_tabpagenr", -1)
	if uniq_nr == -1
		let uniq_nr = s:numbering(tabnr)
	endif
	return uniq_nr
endfunction


let &cpo = s:save_cpo
unlet s:save_cpo
" ___Revitalizer___
" NOTE: below code is generated by :Revitalize.
" Do not mofidify the code nor append new lines
if v:version > 703 || v:version == 703 && has('patch1170')
  function! s:___revitalizer_function___(fstr) abort
    return function(a:fstr)
  endfunction
else
  function! s:___revitalizer_SID() abort
    return matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze____revitalizer_SID$')
  endfunction
  let s:___revitalizer_sid = '<SNR>' . s:___revitalizer_SID() . '_'
  function! s:___revitalizer_function___(fstr) abort
    return function(substitute(a:fstr, 's:', s:___revitalizer_sid, 'g'))
  endfunction
endif

let s:___revitalizer_functions___ = {'make_uniq_nr': s:___revitalizer_function___('s:make_uniq_nr'),'numbering': s:___revitalizer_function___('s:numbering'),'set_prefix': s:___revitalizer_function___('s:set_prefix'),'uniq_nr': s:___revitalizer_function___('s:uniq_nr')}

unlet! s:___revitalizer_sid
delfunction s:___revitalizer_function___

function! vital#_incsearch#Gift#Tabpage#import() abort
  return s:___revitalizer_functions___
endfunction
" ___Revitalizer___
