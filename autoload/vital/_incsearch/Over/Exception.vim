" ___vital___
" NOTE: lines between '" ___vital___' is generated by :Vitalize.
" Do not mofidify the code nor insert new lines before '" ___vital___'
let s:___vital_function___ = 'function'
if !(v:version > 703 || v:version == 703 && has('patch1170'))
  let s:___vital_function___ = 's:___vital_function___'
  function! s:_SID() abort
    return matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze__SID$')
  endfunction
  let s:___vital_sfunc_prefix___ = '<SNR>' . s:_SID() . '_'
  delfunction s:_SID

  function! s:___vital_function___(fstr) abort
    return function(substitute(a:fstr, '^s:', s:___vital_sfunc_prefix___, ''))
  endfunction
endif

function! vital#_incsearch#Over#Exception#import() abort
  return map({'throw': '', 'throw_cmd': '', 'set_prefix': '', 'error': ''},  '{s:___vital_function___}("s:" . v:key)')
endfunction
" ___vital___
scriptencoding utf-8
let s:save_cpo = &cpo
set cpo&vim


let s:vname = expand("<sfile>:h:h:t")
let s:prefix = printf("vital-over(%s) Exception", s:vname)

function! s:set_prefix(prefix)
	let s:prefix = a:prefix
endfunction

function! s:throw_cmd(exp, where)
	return 'throw ' . string(s:prefix . " : " . a:exp . " in " . a:where)
endfunction


function! s:throw(exp, where)
	execute s:throw_cmd(a:exp, a:where)
endfunction


function! s:error(text, where)
	echohl ErrorMsg
	echom s:prefix . " : " . a:text . " in " . a:where
	echohl None
endfunction


let &cpo = s:save_cpo
unlet s:save_cpo
