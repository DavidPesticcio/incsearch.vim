" ___vital___
" NOTE: lines between '" ___vital___' is generated by :Vitalize.
" Do not mofidify the code nor insert new lines before '" ___vital___'
let s:___vital_function___ = 'function'
if !(v:version > 703 || v:version == 703 && has('patch1170'))
  let s:___vital_function___ = 's:___vital_function___'
  function! s:_SID() abort
    return matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze__SID$')
  endfunction
  let s:___vital_sfunc_prefix___ = '<SNR>' . s:_SID() . '_'
  delfunction s:_SID

  function! s:___vital_function___(fstr) abort
    return function(substitute(a:fstr, '^s:', s:___vital_sfunc_prefix___, ''))
  endfunction
endif

function! vital#_incsearch#Over#Commandline#Modules#ExceptionExit#import() abort
  return map({'make': ''},  '{s:___vital_function___}("s:" . v:key)')
endfunction
" ___vital___
scriptencoding utf-8
let s:save_cpo = &cpo
set cpo&vim

let s:module = {
\	"name" : "ExceptionExit",
\}


function! s:module.on_exception(cmdline)
	call a:cmdline.exit(-1)
endfunction


function! s:make(...)
	let result = deepcopy(s:module)
	let result.exit_code = get(a:, 1, 0)
	return result
endfunction

let &cpo = s:save_cpo
unlet s:save_cpo
