scriptencoding utf-8
let s:save_cpo = &cpo
set cpo&vim

" Improved backward word detection which ignore regular expression
let s:module = {
\	"name" : "IgnoreRegexpBackwardWord"
\}

function! s:backward_word(str, ...)
	let pat = get(a:, 1, '\k\+\s*\|.')
	let flags = s:non_escaped_backslash .
	\   '\%(' . 'z[se]' .
	\   '\|' . '[iIkKfFpPsSdDxXoOwWhHaAlLuUetrbncCZmMvV]' .
	\   '\|' . '%[dxouUCVlcv]' .
	\   '\|' . "%'[a-zA-Z]" .
	\   '\|' . '%#=\d' .
	\   '\|' . 'z\=\d' .
	\   '\)'
	return matchstr(get(split(a:str, flags . '\s*\zs'), -1, ""),
	\   '\%(' . flags . '\s*\|' . pat . '\)$')
endfunction


let s:non_escaped_backslash = '\m\%(\%(^\|[^\\]\)\%(\\\\\)*\)\@<=\\'

function! s:module.on_enter(cmdline)
	function! a:cmdline.backward_word(...)
		return call("s:backward_word", [self.backward()] + a:000)
	endfunction
endfunction

function! s:make()
	return deepcopy(s:module)
endfunction


let &cpo = s:save_cpo
unlet s:save_cpo
" ___Revitalizer___
" NOTE: below code is generated by :Revitalize.
" Do not mofidify the code nor append new lines
if v:version > 703 || v:version == 703 && has('patch1170')
  function! s:___revitalizer_function___(fstr) abort
    return function(a:fstr)
  endfunction
else
  function! s:___revitalizer_SID() abort
    return matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze____revitalizer_SID$')
  endfunction
  let s:___revitalizer_sid = '<SNR>' . s:___revitalizer_SID() . '_'
  function! s:___revitalizer_function___(fstr) abort
    return function(substitute(a:fstr, 's:', s:___revitalizer_sid, 'g'))
  endfunction
endif

let s:___revitalizer_functions___ = {'backward_word': s:___revitalizer_function___('s:backward_word'),'make': s:___revitalizer_function___('s:make')}

unlet! s:___revitalizer_sid
delfunction s:___revitalizer_function___

function! vital#_incsearch#Over#Commandline#Modules#IgnoreRegexpBackwardWord#import() abort
  return s:___revitalizer_functions___
endfunction
" ___Revitalizer___
