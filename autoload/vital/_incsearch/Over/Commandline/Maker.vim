scriptencoding utf-8
let s:save_cpo = &cpo
set cpo&vim

let s:modules = [
\	"Scroll",
\	"CursorMove",
\	"Delete",
\	"HistAdd",
\	"History",
\	"Cancel",
\	"Execute",
\	"NoInsert",
\	"InsertRegister",
\	"Redraw",
\	"DrawCommandline",
\	"ExceptionExit",
\	"ExceptionMessage",
\]


function! s:_vital_loaded(V)
	let s:V = a:V
	let s:Cmdline = s:V.import("Over.Commandline.Base")
	let s:Modules = s:V.import("Over.Commandline.Modules")
endfunction


function! s:_vital_depends()
	return [
\		"Over.Commandline.Base",
\		"Over.Commandline.Modules",
\	] + map(copy(s:modules), "'Over.Commandline.Modules.' . v:val")
endfunction


function! s:default(...)
	return call(s:Cmdline.make, a:000, s:Cmdline)
endfunction


function! s:plain()
	return s:Cmdline.plain()
endfunction


function! s:standard(...)
	let result = call(s:Cmdline.make, a:000, s:Cmdline)
	call result.connect("Execute")
	call result.connect("Cancel")
	call result.connect("Delete")
	call result.connect("CursorMove")
	call result.connect("HistAdd")
	call result.connect("History")
	call result.connect("InsertRegister")
	call result.connect(s:Modules.get("NoInsert").make_special_chars())
	call result.connect("Redraw")
	call result.connect("DrawCommandline")
	call result.connect("ExceptionExit")
	call result.connect("ExceptionMessage")
	call result.connect(s:Modules.get("KeyMapping").make_vim_cmdline_mapping())
	call result.connect("Digraphs")
	call result.connect("LiteralInsert")

	return result
endfunction


function! s:standard_search(...)
	let result = s:standard(get(a:, 1, "/"))
	call result.connect(s:Modules.get("Execute").make_search("/"))
	call result.connect(s:Modules.make("HistAdd", "/"))
	call result.connect(s:Modules.make("History", "/"))
	return result
endfunction


function! s:standard_search_back(...)
	let result = s:standard(get(a:, 1, "?"))
	call result.connect(s:Modules.get("Execute").make_search("?"))
	call result.connect(s:Modules.make("HistAdd", "/"))
	call result.connect(s:Modules.make("History", "/"))
	return result
endfunction


let &cpo = s:save_cpo
unlet s:save_cpo
" ___Revitalizer___
" NOTE: below code is generated by :Revitalize.
" Do not mofidify the code nor append new lines
if v:version > 703 || v:version == 703 && has('patch1170')
  function! s:___revitalizer_function___(fstr) abort
    return function(a:fstr)
  endfunction
else
  function! s:___revitalizer_SID() abort
    return matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze____revitalizer_SID$')
  endfunction
  let s:___revitalizer_sid = '<SNR>' . s:___revitalizer_SID() . '_'
  function! s:___revitalizer_function___(fstr) abort
    return function(substitute(a:fstr, 's:', s:___revitalizer_sid, 'g'))
  endfunction
endif

let s:___revitalizer_functions___ = {'_vital_depends': s:___revitalizer_function___('s:_vital_depends'),'_vital_loaded': s:___revitalizer_function___('s:_vital_loaded'),'default': s:___revitalizer_function___('s:default'),'plain': s:___revitalizer_function___('s:plain'),'standard': s:___revitalizer_function___('s:standard'),'standard_search': s:___revitalizer_function___('s:standard_search'),'standard_search_back': s:___revitalizer_function___('s:standard_search_back')}

unlet! s:___revitalizer_sid
delfunction s:___revitalizer_function___

function! vital#_incsearch#Over#Commandline#Maker#import() abort
  return s:___revitalizer_functions___
endfunction
" ___Revitalizer___
